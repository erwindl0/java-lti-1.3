// Generated by delombok at Mon Jul 17 13:40:01 CEST 2023
package edu.uoc.elc.lti.platform.deeplinking;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import edu.uoc.elc.lti.exception.InvalidLTICallException;
import edu.uoc.elc.lti.tool.deeplinking.Settings;
import edu.uoc.lti.deeplink.DeepLinkingResponse;
import edu.uoc.lti.deeplink.DeepLinkingTokenBuilder;
import edu.uoc.lti.deeplink.content.Item;

/**
 * @author xaracil@uoc.edu
 */
public class DeepLinkingClient {
	private final DeepLinkingTokenBuilder deepLinkingTokenBuilder;
	private final String platformName;
	private final String clientId;
	private final String kid;
	private final String azp;
	private final String deploymentId;
	private final String nonce;
	private final Settings settings;
	private List<Item> itemList = new ArrayList<>();

	public boolean canAddItem() {
		return settings.isAccept_multiple() || itemList.size() == 0;
	}

	public void addItem(Item item) {
		// check for multiple content item
		if (!canAddItem()) {
			throw new InvalidLTICallException("Platform doesn\'t allow multiple content items");
		}
		ItemValidator itemValidator = ItemValidatorFactory.itemValidatorFor(item, settings);
		if (!itemValidator.isValid(item)) {
			throw new InvalidLTICallException(itemValidator.getMessage());
		}
		itemList.add(item);
	}

	public URL getReturnUrl() {
		try {
			return new URL(settings.getDeep_link_return_url());
		} catch (MalformedURLException e) {
			throw new InvalidLTICallException(e.getMessage());
		}
	}

	public String buildJWT() {
		DeepLinkingResponse deepLinkingResponse = new DeepLinkingResponse(platformName, clientId, kid, azp, deploymentId, nonce, settings.getData(), itemList);
		return deepLinkingTokenBuilder.build(deepLinkingResponse);
	}

	@java.lang.SuppressWarnings("all")
	public DeepLinkingClient(final DeepLinkingTokenBuilder deepLinkingTokenBuilder, final String platformName, final String clientId, final String kid, final String azp, final String deploymentId, final String nonce, final Settings settings) {
		this.deepLinkingTokenBuilder = deepLinkingTokenBuilder;
		this.platformName = platformName;
		this.clientId = clientId;
		this.kid = kid;
		this.azp = azp;
		this.deploymentId = deploymentId;
		this.nonce = nonce;
		this.settings = settings;
	}

	@java.lang.SuppressWarnings("all")
	public List<Item> getItemList() {
		return this.itemList;
	}
}

// Generated by delombok at Mon Jul 17 13:40:01 CEST 2023
package edu.uoc.elc.lti.tool.oidc;

/**
 * @author xaracil@uoc.edu
 */
public class LoginRequest {
	/**
	 * REQUIRED. The issuer identifier identifying the learning platform.
	 */
	private final String iss;
	/**
	 * REQUIRED. Hint to the Authorization Server about the login identifier the End-User might use to log in.
	 * The permitted values will be defined in the host specification.
	 */
	private final String login_hint;
	/**
	 * REQUIRED. The actual end-point that should be executed at the end of the OpenID Connect authentication flow.
	 */
	private final String target_link_uri;
	/**
	 * The new optional parameter lti_message_hint may be used alongside the login_hint to carry information about
	 * the actual LTI message that is being launched.
	 *
	 * Similarly to the login_hint parameter, lti_message_hint value is opaque to the tool.
	 * If present in the login initiation request, the tool MUST include it back in the authentication request unaltered.
	 */
	private String lti_message_hint;
	/**
	 * The new optional parameter lti_deployment_id that if included, MUST contain the same deployment id that would be
	 * passed in the https://purl.imsglobal.org/spec/lti/claim/deployment_id claim for the subsequent LTI message launch.
	 *
	 * This parameter may be used by the tool to perform actions that are dependant on a specific deployment.
	 * An example of this would be, using the deployment id to identify the region in which a tenant linked to the
	 * deployment lives. Subsequently changing the redirect_url the final launch will be directed to.
	 */
	private String lti_deployment_id;
	/**
	 * The new optional parameter client_id specifies the client id for the authorization server that should be used to
	 * authorize the subsequent LTI message request. This allows for a platform to support multiple registrations
	 * from a single issuer, without relying on the initiate_login_uri as a key
	 */
	private String client_id;

	@java.lang.SuppressWarnings("all")
	LoginRequest(final String iss, final String login_hint, final String target_link_uri, final String lti_message_hint, final String lti_deployment_id, final String client_id) {
		this.iss = iss;
		this.login_hint = login_hint;
		this.target_link_uri = target_link_uri;
		this.lti_message_hint = lti_message_hint;
		this.lti_deployment_id = lti_deployment_id;
		this.client_id = client_id;
	}


	@java.lang.SuppressWarnings("all")
	public static class LoginRequestBuilder {
		@java.lang.SuppressWarnings("all")
		private String iss;
		@java.lang.SuppressWarnings("all")
		private String login_hint;
		@java.lang.SuppressWarnings("all")
		private String target_link_uri;
		@java.lang.SuppressWarnings("all")
		private String lti_message_hint;
		@java.lang.SuppressWarnings("all")
		private String lti_deployment_id;
		@java.lang.SuppressWarnings("all")
		private String client_id;

		@java.lang.SuppressWarnings("all")
		LoginRequestBuilder() {
		}

		/**
		 * REQUIRED. The issuer identifier identifying the learning platform.
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LoginRequest.LoginRequestBuilder iss(final String iss) {
			this.iss = iss;
			return this;
		}

		/**
		 * REQUIRED. Hint to the Authorization Server about the login identifier the End-User might use to log in.
		 * The permitted values will be defined in the host specification.
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LoginRequest.LoginRequestBuilder login_hint(final String login_hint) {
			this.login_hint = login_hint;
			return this;
		}

		/**
		 * REQUIRED. The actual end-point that should be executed at the end of the OpenID Connect authentication flow.
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LoginRequest.LoginRequestBuilder target_link_uri(final String target_link_uri) {
			this.target_link_uri = target_link_uri;
			return this;
		}

		/**
		 * The new optional parameter lti_message_hint may be used alongside the login_hint to carry information about
		 * the actual LTI message that is being launched.
		 *
		 * Similarly to the login_hint parameter, lti_message_hint value is opaque to the tool.
		 * If present in the login initiation request, the tool MUST include it back in the authentication request unaltered.
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LoginRequest.LoginRequestBuilder lti_message_hint(final String lti_message_hint) {
			this.lti_message_hint = lti_message_hint;
			return this;
		}

		/**
		 * The new optional parameter lti_deployment_id that if included, MUST contain the same deployment id that would be
		 * passed in the https://purl.imsglobal.org/spec/lti/claim/deployment_id claim for the subsequent LTI message launch.
		 *
		 * This parameter may be used by the tool to perform actions that are dependant on a specific deployment.
		 * An example of this would be, using the deployment id to identify the region in which a tenant linked to the
		 * deployment lives. Subsequently changing the redirect_url the final launch will be directed to.
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LoginRequest.LoginRequestBuilder lti_deployment_id(final String lti_deployment_id) {
			this.lti_deployment_id = lti_deployment_id;
			return this;
		}

		/**
		 * The new optional parameter client_id specifies the client id for the authorization server that should be used to
		 * authorize the subsequent LTI message request. This allows for a platform to support multiple registrations
		 * from a single issuer, without relying on the initiate_login_uri as a key
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LoginRequest.LoginRequestBuilder client_id(final String client_id) {
			this.client_id = client_id;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		public LoginRequest build() {
			return new LoginRequest(this.iss, this.login_hint, this.target_link_uri, this.lti_message_hint, this.lti_deployment_id, this.client_id);
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		public java.lang.String toString() {
			return "LoginRequest.LoginRequestBuilder(iss=" + this.iss + ", login_hint=" + this.login_hint + ", target_link_uri=" + this.target_link_uri + ", lti_message_hint=" + this.lti_message_hint + ", lti_deployment_id=" + this.lti_deployment_id + ", client_id=" + this.client_id + ")";
		}
	}

	@java.lang.SuppressWarnings("all")
	public static LoginRequest.LoginRequestBuilder builder() {
		return new LoginRequest.LoginRequestBuilder();
	}

	/**
	 * REQUIRED. The issuer identifier identifying the learning platform.
	 */
	@java.lang.SuppressWarnings("all")
	public String getIss() {
		return this.iss;
	}

	/**
	 * REQUIRED. Hint to the Authorization Server about the login identifier the End-User might use to log in.
	 * The permitted values will be defined in the host specification.
	 */
	@java.lang.SuppressWarnings("all")
	public String getLogin_hint() {
		return this.login_hint;
	}

	/**
	 * REQUIRED. The actual end-point that should be executed at the end of the OpenID Connect authentication flow.
	 */
	@java.lang.SuppressWarnings("all")
	public String getTarget_link_uri() {
		return this.target_link_uri;
	}

	/**
	 * The new optional parameter lti_message_hint may be used alongside the login_hint to carry information about
	 * the actual LTI message that is being launched.
	 *
	 * Similarly to the login_hint parameter, lti_message_hint value is opaque to the tool.
	 * If present in the login initiation request, the tool MUST include it back in the authentication request unaltered.
	 */
	@java.lang.SuppressWarnings("all")
	public String getLti_message_hint() {
		return this.lti_message_hint;
	}

	/**
	 * The new optional parameter lti_deployment_id that if included, MUST contain the same deployment id that would be
	 * passed in the https://purl.imsglobal.org/spec/lti/claim/deployment_id claim for the subsequent LTI message launch.
	 *
	 * This parameter may be used by the tool to perform actions that are dependant on a specific deployment.
	 * An example of this would be, using the deployment id to identify the region in which a tenant linked to the
	 * deployment lives. Subsequently changing the redirect_url the final launch will be directed to.
	 */
	@java.lang.SuppressWarnings("all")
	public String getLti_deployment_id() {
		return this.lti_deployment_id;
	}

	/**
	 * The new optional parameter client_id specifies the client id for the authorization server that should be used to
	 * authorize the subsequent LTI message request. This allows for a platform to support multiple registrations
	 * from a single issuer, without relying on the initiate_login_uri as a key
	 */
	@java.lang.SuppressWarnings("all")
	public String getClient_id() {
		return this.client_id;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "LoginRequest(iss=" + this.getIss() + ", login_hint=" + this.getLogin_hint() + ", target_link_uri=" + this.getTarget_link_uri() + ", lti_message_hint=" + this.getLti_message_hint() + ", lti_deployment_id=" + this.getLti_deployment_id() + ", client_id=" + this.getClient_id() + ")";
	}
}

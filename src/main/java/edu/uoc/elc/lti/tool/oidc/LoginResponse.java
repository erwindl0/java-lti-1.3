// Generated by delombok at Fri Jul 28 11:41:52 CEST 2023
package edu.uoc.elc.lti.tool.oidc;

/**
 * @author xaracil@uoc.edu
 */
public class LoginResponse {
	private final String scope = "openid";
	private final String response_type = "id_token";
	/**
	 * The Tool’s Client ID for this issuer.
	 */
	private final String client_id;
	/**
	 * One of the registered redirect URIs. *
	 */
	private final String redirect_uri;
	/**
	 * As passed in the initiate login request.
	 */
	private final String login_hint;
	/**
	 * Opaque value for the platform to maintain state between the request and callback and provide Cross-Site Request Forgery (CSRF) mitigation.*
	 */
	private String state;
	/**
	 * The Token can be lengthy and thus should be passed over as a form POST.
	 */
	private final String response_mode = "form_post";
	/**
	 * String value used to associate a Client session with an ID Token, and to mitigate replay attacks.
	 * The value is passed through unmodified from the Authentication Request to the ID Token.
	 */
	private final String nonce;
	/**
	 * Since the message launch is meant to be sent from a platform where the user is already logged in.
	 * If the user has no session, a platform must just fail the flow rather than ask the user to log in.
	 */
	private final String prompt = "none";
	private String lti_message_hint;

	@java.lang.SuppressWarnings("all")
	LoginResponse(final String client_id, final String redirect_uri, final String login_hint, final String state, final String nonce, final String lti_message_hint) {
		this.client_id = client_id;
		this.redirect_uri = redirect_uri;
		this.login_hint = login_hint;
		this.state = state;
		this.nonce = nonce;
		this.lti_message_hint = lti_message_hint;
	}


	@java.lang.SuppressWarnings("all")
	public static class LoginResponseBuilder {
		@java.lang.SuppressWarnings("all")
		private String client_id;
		@java.lang.SuppressWarnings("all")
		private String redirect_uri;
		@java.lang.SuppressWarnings("all")
		private String login_hint;
		@java.lang.SuppressWarnings("all")
		private String state;
		@java.lang.SuppressWarnings("all")
		private String nonce;
		@java.lang.SuppressWarnings("all")
		private String lti_message_hint;

		@java.lang.SuppressWarnings("all")
		LoginResponseBuilder() {
		}

		/**
		 * The Tool’s Client ID for this issuer.
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LoginResponse.LoginResponseBuilder client_id(final String client_id) {
			this.client_id = client_id;
			return this;
		}

		/**
		 * One of the registered redirect URIs. *
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LoginResponse.LoginResponseBuilder redirect_uri(final String redirect_uri) {
			this.redirect_uri = redirect_uri;
			return this;
		}

		/**
		 * As passed in the initiate login request.
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LoginResponse.LoginResponseBuilder login_hint(final String login_hint) {
			this.login_hint = login_hint;
			return this;
		}

		/**
		 * Opaque value for the platform to maintain state between the request and callback and provide Cross-Site Request Forgery (CSRF) mitigation.*
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LoginResponse.LoginResponseBuilder state(final String state) {
			this.state = state;
			return this;
		}

		/**
		 * String value used to associate a Client session with an ID Token, and to mitigate replay attacks.
		 * The value is passed through unmodified from the Authentication Request to the ID Token.
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LoginResponse.LoginResponseBuilder nonce(final String nonce) {
			this.nonce = nonce;
			return this;
		}

		/**
		 * @return {@code this}.
		 */
		@java.lang.SuppressWarnings("all")
		public LoginResponse.LoginResponseBuilder lti_message_hint(final String lti_message_hint) {
			this.lti_message_hint = lti_message_hint;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		public LoginResponse build() {
			return new LoginResponse(this.client_id, this.redirect_uri, this.login_hint, this.state, this.nonce, this.lti_message_hint);
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		public java.lang.String toString() {
			return "LoginResponse.LoginResponseBuilder(client_id=" + this.client_id + ", redirect_uri=" + this.redirect_uri + ", login_hint=" + this.login_hint + ", state=" + this.state + ", nonce=" + this.nonce + ", lti_message_hint=" + this.lti_message_hint + ")";
		}
	}

	@java.lang.SuppressWarnings("all")
	public static LoginResponse.LoginResponseBuilder builder() {
		return new LoginResponse.LoginResponseBuilder();
	}

	@java.lang.SuppressWarnings("all")
	public String getScope() {
		return this.scope;
	}

	@java.lang.SuppressWarnings("all")
	public String getResponse_type() {
		return this.response_type;
	}

	/**
	 * The Tool’s Client ID for this issuer.
	 */
	@java.lang.SuppressWarnings("all")
	public String getClient_id() {
		return this.client_id;
	}

	/**
	 * One of the registered redirect URIs. *
	 */
	@java.lang.SuppressWarnings("all")
	public String getRedirect_uri() {
		return this.redirect_uri;
	}

	/**
	 * As passed in the initiate login request.
	 */
	@java.lang.SuppressWarnings("all")
	public String getLogin_hint() {
		return this.login_hint;
	}

	/**
	 * Opaque value for the platform to maintain state between the request and callback and provide Cross-Site Request Forgery (CSRF) mitigation.*
	 */
	@java.lang.SuppressWarnings("all")
	public String getState() {
		return this.state;
	}

	/**
	 * The Token can be lengthy and thus should be passed over as a form POST.
	 */
	@java.lang.SuppressWarnings("all")
	public String getResponse_mode() {
		return this.response_mode;
	}

	/**
	 * String value used to associate a Client session with an ID Token, and to mitigate replay attacks.
	 * The value is passed through unmodified from the Authentication Request to the ID Token.
	 */
	@java.lang.SuppressWarnings("all")
	public String getNonce() {
		return this.nonce;
	}

	/**
	 * Since the message launch is meant to be sent from a platform where the user is already logged in.
	 * If the user has no session, a platform must just fail the flow rather than ask the user to log in.
	 */
	@java.lang.SuppressWarnings("all")
	public String getPrompt() {
		return this.prompt;
	}

	@java.lang.SuppressWarnings("all")
	public String getLti_message_hint() {
		return this.lti_message_hint;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "LoginResponse(scope=" + this.getScope() + ", response_type=" + this.getResponse_type() + ", client_id=" + this.getClient_id() + ", redirect_uri=" + this.getRedirect_uri() + ", login_hint=" + this.getLogin_hint() + ", state=" + this.getState() + ", response_mode=" + this.getResponse_mode() + ", nonce=" + this.getNonce() + ", prompt=" + this.getPrompt() + ", lti_message_hint=" + this.getLti_message_hint() + ")";
	}
}
